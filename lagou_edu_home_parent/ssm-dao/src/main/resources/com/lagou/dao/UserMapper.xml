<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lagou.dao.UserMapper">
    
    <!-- 分页查询及多条件查询 public List<User> findAllUserByPage(UserVo userVo)-->
    <select id="findAllUserByPage" parameterType="com.lagou.domain.UserVo" resultType="com.lagou.domain.User">
        
        select * from user
        <where>
            <if test="true">
                and is_del != 1
            </if>
            <if test="username != null">
                and name = #{username}
            </if>
            <if test="startCreateTime != null and endCreateTime != null">
            and create_time BETWEEN #{startCreateTime} AND #{endCreateTime}
            </if>
        </where>
    </select>

    <!-- 用户状态设置 public void updateUserStatus(User user)-->
    <update id="updateUserStatus" parameterType="com.lagou.domain.User">

        update user set status = #{status}, update_time = #{update_time} where id = #{id}
    </update>

    <!-- 用户登录public User login(User user)-->
    <select id="login" parameterType="com.lagou.domain.User" resultType="com.lagou.domain.User">
        select * from user where phone = #{phone}
    </select>



    <!-- 根据userid清空中间表关联关系 void deleteUserContextRole(Integer
userId);-->
    <delete id="deleteUserContextRole" parameterType="int">
        delete from user_role_relation where user_id = #{userid}
    </delete>

    <!--用户角色关联 void userContextRole(Integer userId, Integer roleid);-->
    <insert id="userContextRole" parameterType="com.lagou.domain.User_Role_relation">
        insert into user_role_relation values(null,#{userId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>

    <!-- 1.根据id查询角色信息 public List<Role> findUserRelationRoleById(int id);-->
    <select id="findUserRelationRoleById" resultType="com.lagou.domain.Role" parameterType="int">
                SELECT
                  r.id,
                  r.code,
                  r.name,
                  r.description
                FROM
                  roles r
                  INNER JOIN user_role_relation ur
                    ON r.`id` = ur.`role_id`
                  INNER JOIN USER u
                    ON ur.`user_id` = u.`id`
                WHERE u.`id` = #{id}
     </select>
    <!-- 2.根据用户的角色ID查询顶级菜单 public List<Menu> findParentMenuByRoleId(List<Integer> ids);-->
    <select id="findParentMenuByRoleId" parameterType="java.util.List" resultType="com.lagou.domain.Menu">

          SELECT DISTINCT m.* FROM roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id INNER JOIN menu m ON rm.menu_id = m.id WHERE m.parent_id = -1 AND r.id
        <foreach collection="list" item="item" open="in(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <!-- 3.根据用户的角色ID查询顶级菜单关联的子菜单public List<Menu> findSubMenuByPid(Integer pid);-->
    <select id="findSubMenuByPid" parameterType="int" resultType="com.lagou.domain.Menu">

        SELECT * FROM menu WHERE parent_id = #{pid}
    </select>

    <!-- 4.获取用户拥有的资源权限信息 （本质还是用角色进行获取）public List<Resource> findResourceByRoleId(List<Integer> ids);-->
    <select id="findResourceByRoleId" resultType="com.lagou.domain.Resource" parameterType="java.util.List">
            SELECT DISTINCT res.* FROM roles r INNER JOIN role_resource_relation rr ON r.id = rr.role_id INNER JOIN resource res ON res.id = rr.resource_id WHERE r.id
        <foreach collection="list" item="item" open="in(" separator="," close=")">
            #{item}
        </foreach>

    </select>


</mapper>